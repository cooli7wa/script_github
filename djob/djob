#!/bin/bash -
IFS="
	 "
PATH=/usr/local/bin:/bin:/usr/bin
export PATH

show_complete_job=1
g_job_number=
g_job_priority=
#当前date，计算用，非今天
date_cur=
#除了今天以外，一共需要显示的天数
days=
#除了这周，一共需要显示的周数
weeks=
#今天是星期几
today_week_day=
#今天的日期
today=
today_year=
today_month=
today_day=
djob_file_path="$HOME""/djob_file/"
djob_list="$djob_file_path""djob_list"
djob_list_tmp="$djob_job_file_path""djob_list_tmp"

error()
{
	echo "$@" 1>&2
	usage_and_exit 1
}

usage_and_exit()
{
	echo "Usage: djob [--date <xd>] [--date <xw>] [--help -h]
			--date xd : jobs from x days before
			--date xw : jobs from x week before
			--help -h : show useage
		 "
	eval "exit $1"
}

title_print()
{
	local title=`sed -n 1p "$djob_list"`
	title=${title//:/    }
    echo $title
}

#job_print()
#@in job_line
job_print()
{
	if [ "z`echo "$1" | cut -s -d : -f 4`" != "z" ]
    then
        echo -e "\033[32m${1//:/  }\033[0m"
    else
		local complete_time="no"
        local title=`echo -n "$1" | cut -s -d : -f 2`
        local num=`echo -n "$1" | cut -s -d : -f 1`
        local create_time=`echo -n "$1" | cut -s -d : -f 3`
        local priority=`echo -n "$1" | cut -s -d : -f 5`
		echo -e ""$num"  \033[36m"$title"\033[0m  "$create_time"  "$complete_time"  "$priority""
    fi
}

#show_job_update
#@in job_number
show_job_update()
{
	if [ -e "$djob_file_path""$1".job ]
	then
		awk 'BEGIN{eprint=0;color=0}
			{
				if ($0~/\[update\]/) {
					eprint=1;
					color=0;
				} else if ($0~/\[end update\]/) {
					eprint=0;
					color=0;
				}
				if (eprint) {
					if (color) {
						system("echo \033[31m"$0"\033[0m");
					} else {
						print;
					}
					color=!color;
				}
			}' "$djob_file_path""$1".job
	else
		echo "no update"
	fi
}

#show job summarize
#@in job_number
show_job_summarize()
{
	local files=(`find $djob_file_path$1.summarize.* 2>/dev/null | xargs echo`)
	if [ ${#files[@]} -ne 0 ]
	then
		echo =============[summarize]================
		for ((i=0;i<${#files[@]};i++))
		do
			local date=`echo ${files[$i]} | sed -r "s/.*\.([0-9]+$)/\1/g"`
			echo -e "\033[31m$date\033[0m"
			cat ${files[$i]}
		done
	fi
}

print_job_message()
{
	echo ""
#	show title
	title_print
#	show job info
	job_print "`sed -n "/^"$1":/p" "$djob_list"`"
#	show job update
	show_job_update "$1"
#   show job summarize, if exist
	show_job_summarize "$1"
}

date_print()
{
	echo -e "================ \033[31m${1:0:4}.${1:4:2}.${1:6:2}\033[0m ================="
}

sort_job_list()
{
	sed -n "1p" "$djob_list" > "$djob_list_tmp"
	sed -n '2,$p' "$djob_list" | sort -t: -k4 -k5 >> "$djob_list_tmp"
	mv "$djob_list_tmp" "$djob_list"
}

#根据传入的date，来显示当前date的jobs
show_daily_job()
{
#如果date为今天，那么两个选择，打印当天完成的job和未完成job，或者打印未完成job
#如果date为其他，那么只打印完成的job
	if [ "$1" == "$today" ]
	then
		if [[ "$show_complete_job" -eq 1 ]]
		then
			cat "$djob_list" | while read line
			do
				if [[ "`echo -n "$line" | cut -s -d : -f 4`" =~ "$1" ]] || [[ -z "`echo -n "$line" | cut -s -d : -f 4`" ]]
				then
					job_print "$line"
				fi
			done
		else
			cat "$djob_list" | while read line
			do
				if [[ -z "`echo -n "$line" | cut -s -d : -f 4`" ]]
				then
					job_print "$line"
				fi
			done
		fi
	else
		cat "$djob_list" | while read line
		do
			if [[ "`echo -n "$line" | cut -s -d : -f 4`" =~ "$1" ]]
			then
				job_print "$line"
			fi
		done

	fi
}

add_job()
{
    local title_priority
	echo "new job format: title@youxianji"
	read -p "enter: " title_priority
	local title=`echo "$title_priority" | cut -s -d @ -f 1`
	local priority=`echo "$title_priority" | cut -s -d @ -f 2`
	if [ z$priority == z"" ] 
	then
		title="$title_priority"
		priority=1
		echo "Apply default priority 1"
	fi
	local current_max_num="`sed -n '2,$p' "$djob_list" | cut -s -d : -f 1 | sort -nr | head -1`"
	local job_number=$(($current_max_num+1))
	echo ""$job_number":"$title":"`date +\%Y\%m\%d\%H\%M`"::"$priority"" >> "$djob_list"
}

edit_job_info()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
	echo "job format: title@priority"
	local title_priority
	read -p "enter: " title_priority
	local title=`echo "$title_priority" | cut -s -d @ -f 1`
	local priority=`echo "$title_priority" | cut -s -d @ -f 2`
	if [ z$priority == z"" ] 
	then
		title="$title_priority"
		echo "Apply default priority 1"
	fi
    local job_info=`sed -n "/^"$job_number":/p" "$djob_list"`
	local date_create=`echo -n "$job_info" | cut -s -d : -f 3`
	local date_complete=`echo -n "$job_info" | cut -s -d : -f 4`
	sed -i "/^"$job_number":/d" "$djob_list"
	echo ""$job_number":"$title":"$date_create":"$date_complete":"$priority"" >> "$djob_list"
}

edit_job_priority()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
	local job_priority
	if [ -z $g_job_priority ]
	then
		echo "enter job priority"
		read job_priority
	else
		job_priority="$g_job_priority"
	fi
	sed -i -r "s/(^$job_number:.*:)[0-9]$/\1$job_priority/g" "$djob_list"
}

show_job()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
    print_job_message "$job_number"
}

del_job()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
	sed -i "/^"$job_number":/d" "$djob_list"
	if [ -e "$djob_file_path""$job_number".job ]
	then
		rm "$djob_file_path""$job_number".job
	fi
	local files=(`find $djob_file_path$job_number.summarize.* 2>/dev/null | xargs echo`)
	if [ ${#files[@]} -ne 0 ]
	then
		for ((i=0;i<${#files[@]};i++))
		do
			rm ${files[$i]}
		done
	fi

}

complete_job()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
	local date="`date +\%Y\%m\%d\%H\%M`"
	sed -i -r "s/(^$job_number:.*:.*:)(:[0-9]$)/\1$date\2/g" "$djob_list"
}

uncomplete_job()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi
	sed -i -r "s/(^$job_number:.*:.*:).*(:[0-9]$)/\1\2/g" "$djob_list"
}
add_update()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
		g_job_number=$job_number
	else
		job_number="$g_job_number"
	fi
	echo "please enter update message: "
	local IFS_BAK="$IFS"
	IFS="\n"
	local message
	read  message
	IFS="$IFS_BAK"
	if [ ! -e "$djob_file_path""$job_number".job ]
	then
		cp "$djob_file_path"example.job "$djob_file_path""$job_number".job
	    local job_info=`sed -n "/^"$job_number":/p" "$djob_list"`
		local title=`echo -n "$job_info" | cut -s -d : -f 2`
	    local date_create=`echo -n "$job_info" | cut -s -d : -f 3`
	    local date_complete=`echo -n "$job_info" | cut -s -d : -f 4`
		local priority=`echo -n "$job_info" | cut -s -d : -f 5`
		sed -r -i "s/(内部编号:)/\1$job_number/g;s/(标题:)/\1$title/g;
				 s/(创建日期:)/\1$date_create/g;s/(完成日期:)/\1$date_complete/g;
				 s/(优先级:)/\1$priority/g" "$djob_file_path""$job_number".job
	fi
	sed -i "/end update/i`date +\%Y\%m\%d\%H\%M`" "$djob_file_path""$job_number".job
	sed -i "/end update/i$message" "$djob_file_path""$job_number".job
}

add_summarize()
{
	local job_number
	if [ -z $g_job_number ]
	then
		echo "enter job number"
		read job_number
	else
		job_number="$g_job_number"
	fi

	vim "$djob_file_path"/"$job_number".summarize.`date +\%Y\%m\%d\%H\%M\%S`
}

cal_date_onedaybefore()
{
	local year=${date_cur:0:4}
	local month=${date_cur:4:2}
	local day=${date_cur:6:2}
	year=`expr $year + 0`
	day=`expr $day + 0`
	month=`expr $month + 0`

	if (( $day==1 ))
	then
		if (( $month==3 ))
		then
			if (( $year%4==0 && $year%100!=0 || $year%400==0 ))
			then
				day=29
			else
				day=28
			fi
		else
			if (( $month==1 || $month==2 || $month==4 || $month==6 || $month==8 || $month==9 || $month==11 ))
			then
				day=31
			else
				day=30
			fi
		fi
		if (( $month==1 ))
		then
			month=12
			year=$((year - 1))
		else
			month=$((month - 1))
		fi
	else
		day=$((day - 1))
	fi
	date_cur=$year`printf "%02d" $month``printf "%02d" $day`
}


# begin flow
today=`date +\%Y\%m\%d`
today_year=`expr ${today:0:4} + 0`
today_month=`expr ${today:4:2} + 0`
today_day=`expr ${today:6:2} + 0`

if [ "$#" -ne 0 ]
then
	while [ "$#" -gt 0 ]
	do
		case $1 in
		--date )
			case $2 in
			*d)
				days=`echo "$2" | sed -r "s/^([0-9]+)d/\1/g"`
				shift
				;;
			*w)
				weeks=`echo "$2" | sed -r "s/^([0-9]+)w/\1/g"`
				today_week_day=$(((today_day+2*today_month+3*(today_month+1)/5+today_year+today_year/4-today_year/100+today_year/400)%7+1))
				days=$((weeks*7+today_week_day-1))
				shift
				;;
			*)
				break
				;;
			esac
			;;
		--help | -h | '--?' | '-?' )
			usage_and_exit 0
			;;
		-* | --* )
			error "Unrecongnized option: $1"
			;;
		*)
			break
			;;
		esac
		shift
	done
else
	days=0
	show_complete_job=0
fi

sort_job_list
title_print
date_cur=$today
for((i="$days"; i>=0; i--))
do
	date_print "$date_cur"
	show_daily_job "$date_cur"
	cal_date_onedaybefore
done

read nouse
echo "What to do next:
 aj : add new job.
 au : add update. au [xxx]
 as : add summarize. as [xxx]
 sj : show job. sj [xxx]
 ej : edit job info. ej [xxx]
 ep : edit job's priority [xxx]
 cj : complete job. cj [xxx]
 ucj : uncomplete job. fj [xxx]
 dj : del job. dj [xxx]
 0 : exit"
read -p "your choose: " choose g_job_number g_job_priority
case "$choose" in
aj)
    add_job
	;;
au)
	add_update
	show_job
	;;
as)
	add_summarize
	;;
sj)
	show_job
    ;;
ej)
	edit_job_info
	;;
ep)
	edit_job_priority
	;;
cj)
	complete_job
	;;
ucj)
	uncomplete_job
	;;
dj)
	del_job
	;;
0 | "")
    exit 0
    ;;
*)
	error "Unrecongnized option"
    ;;
esac
exit 0
