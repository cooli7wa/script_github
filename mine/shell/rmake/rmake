complete -F __rmake_cmd_HUB rmake
function __rmake_cmd
{
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local REPO_ROOT_PATH=`repo info | grep "Mount path" | head -1 | grep -o '/.*/'`
    local options="`cd $REPO_ROOT_PATH && make -pRrq : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($1 !~ "^[#.]") {print $1}}' | egrep -v '^[^[:alnum:]]' | sort`"
    COMPREPLY=( $(compgen -W "${options}" -- ${cur}) )
}
function __rmake_cmd_HUB
{
    repo info > /dev/null 2>&1
    if [ $? != 0 ];then
        echo "not in repo or sub folders"
        return
    fi
    case $COMP_CWORD in
    0)  ;;
    1)  if [ ${COMP_WORDS[0]} == rmake ];then
            eval __rmake_cmd
        fi
        ;;
    esac
}
function rmake
{
	OST_CURRENT_FOLDER=`pwd`
	OPTIND=0
    while getopts :h opt
    do
        case $opt in
            h)  echo "Usage: rmake [-h] [REPO_MAKE_COMMAND]"
                echo "       @REPO_MAKE_COMMAND: same as normal make command in repo"
                echo "       @-h : show usage"
				echo ""
				echo "       You don't need to switch folder for compile now"
				echo "       You can use this command in repo root folder or sub folders directly"
				echo "       And rmake can auto completion"
				return
                ;;
            ?)  echo "Invalid option, use -h to see usage"
				return
                ;;
        esac
    done
    shift $((OPTIND - 1))

    repo info > /dev/null 2>&1
    if [ $? != 0 ];then
        echo "not in repo or sub folders"
        return
    fi
    export REPO_ROOT_PATH=`repo info | grep "Mount path" | head -1 | grep -o '/.*/'`
    (cd $REPO_ROOT_PATH && eval make $* OST_CURRENT_FOLDER=$OST_CURRENT_FOLDER)
}
