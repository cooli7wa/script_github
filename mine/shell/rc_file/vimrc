set encoding=utf-8

"缩进宽度
set tabstop=4
set softtabstop=4
set shiftwidth=4

"自动缩进与c语言风格缩进
set autoindent
set cindent

"语法高亮
syntax on

"显示行号
"set nu

"将tab扩展成空格
"set expandtab
set noexpandtab

" 粘贴去掉缩进
set pastetoggle=<F12>

" =================== tags 相关 =====================
set tags=./.tags;,.tags

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" forbid gutentags adding gtags databases
let g:gutentags_auto_add_gtags_cscope = 0

" =================== Preview 相关 =====================
noremap <c-i> :PreviewScroll -1<cr>
noremap <c-k> :PreviewScroll +1<cr>
noremap <c-j> :PreviewQuickfix<cr>
noremap <c-l> :PreviewClose<cr>

" =================== asyncrun 相关 =====================
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6

" 任务结束时候响铃提醒
let g:asyncrun_bell = 1

" 使用 cmake 更新 makefile
nnoremap <silent> <F4> :AsyncRun -cwd=<root> cmake . <cr>
" 单文件：编译
nnoremap <silent> <F5> :AsyncRun gcc -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" 单文件：运行
nnoremap <silent> <F6> :AsyncRun -cwd=$(VIM_FILEDIR) -mode=4 "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" <cr>
" 项目：编译
nnoremap <silent> <F7> :AsyncRun -cwd=<root> make <cr>
" 项目：运行
nnoremap <silent> <F8> :AsyncRun -cwd=<root> -raw make run <cr>
" 项目：测试
nnoremap <silent> <F9> :AsyncRun -cwd=<root> -raw make test <cr>
" 设置 ctrl+m 打开/关闭 Quickfix 窗口
nnoremap <c-m> :call asyncrun#quickfix_toggle(6)<cr>

" =================== ALE 代码检查 =====================
let g:ale_linters_explicit = 1
let g:ale_linters = {'cpp':['cppcheck','clang','gcc'],'c':['cppcheck','clang', 'gcc']}
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''

" =================== ycm 代码补全 =====================
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'debug'
let g:ycm_server_keep_logfiles = 1
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_semantic_triggers =  {
           \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
           \ 'cs,lua,javascript': ['re!\w{2}'],
           \ }
let g:ycm_filetype_whitelist = {
			\ "c":1,
			\ "cpp":1,
			\ "sh":1,
			\ "go":1,
			\ }
noremap <c-z> <NOP>

" =================== deoplete 异步补全  =====================
let g:deoplete#enable_at_startup = 1

" =================== LeaderF 显示文件列表，查找文件 =====================
let g:Lf_ShortcutF = '<c-p>'
"let g:Lf_ShortcutB = '<c-n>'
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
"noremap <c-m> :LeaderfMru<cr>
noremap <c-f> :LeaderfFunction!<cr>
"noremap <c-b> :LeaderfBuffer<cr>
"noremap <c-c> :LeaderfTag<cr>

" =================== vim-plug 相关 =====================
call plug#begin('~/.vim/plugged')
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
Plug 'skywind3000/asyncrun.vim'
Plug 'skywind3000/vim-preview'
Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe'
Plug 'Yggdroot/LeaderF'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'sgur/vim-textobj-parameter'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
call plug#end()
