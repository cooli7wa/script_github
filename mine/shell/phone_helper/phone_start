#!/bin/bash -

REPO_ROOT=`repo info | grep "Mount path" | head -1 | grep -o '/.*/'`
CUSTOM_FOLDER_PATH=$REPO_ROOT/customization
COMMON_FOLDER_PATH=$CUSTOM_FOLDER_PATH/common
VENDOR_FOLDER_PATH=$CUSTOM_FOLDER_PATH/vendor
TARGET_FOLDER_PATH=$CUSTOM_FOLDER_PATH/new
TMP_FILE_PATH=/tmp/phone_start.tmp
PHONE_NAME_FILE_PATH=$TARGET_FOLDER_PATH/phone_name
XML_FILE_PATH=$TARGET_FOLDER_PATH/stable.xml
ORIGIN_XML_FILE=`cd $REPO_ROOT; ls -al .repo/manifest.xml | grep -oP '\-\> \K.*$' | sed 's:^:.repo/:g'`
OLD_XML=${ORIGIN_XML_FILE##.*/}
OLD_XML_RECORD_FILE_PATH=/tmp/old_xml_path.txt

PHONE_NAME=""
PHONE_STABLE_NAME=""

source $REPO_ROOT/tools_manager/phone_helper/_phone_utils

####################################################################################

echo_color YELLOW "Please input phone name: "
read PHONE_NAME
if [ -z "$PHONE_NAME" ];then
	echo_color RED "Phone name is null"
	exit 1
fi
if ! echo $PHONE_NAME | grep -q '^[a-zA-Z0-9_.]\+$'; then
	echo_color RED "Phone name should only include these characters, [a-zA-Z0-9_.]"
	exit 1
fi
if [ -d $VENDOR_FOLDER_PATH ];then
	CURRENT_VENDOR_PHONE_LIST=`cd $VENDOR_FOLDER_PATH; find -mindepth 1 -maxdepth 1 -type d | sed "/stash/d; s/^\.\///g"`
	result=`echo "$CURRENT_VENDOR_PHONE_LIST" | grep "^$PHONE_NAME$"`
	if [ -n "$result" ];then
		echo_color RED "Phone already exist"
		exit 1
	fi
fi
check_and_mkdir "$TARGET_FOLDER_PATH"

CURRENT_STABLE_LIST=`cd $COMMON_FOLDER_PATH; ls -1`
echo_color YELLOW "Please choose stable version: "
choose_one "$CURRENT_STABLE_LIST" PHONE_STABLE_NAME

show_info $PHONE_NAME $PHONE_STABLE_NAME

####################################################################################

need_stash=0
auto_apply=0

check_uncommit_changes
if [ $? != 0 ];then
	need_stash=1
	echo_color YELLOW "You have uncommit changes"
	echo_color YELLOW "We will stash first to avoid conflict"
	echo_color YELLOW "Do you want to auto apply these changes on new phone branch? (y/N)"
	read choose
	if [[ "z$choose" =~ ^z[yY](es)?$ ]];then
		auto_apply=1
	fi
fi

####################################################################################

echo_color YELLOW "Begin start phone, please wait .."

if [ z"$OLD_XML" != z"stable.xml" ]; then
	echo $OLD_XML > $OLD_XML_RECORD_FILE_PATH
fi
cp $COMMON_FOLDER_PATH/$PHONE_STABLE_NAME/stable.xml  $XML_FILE_PATH
echo $PHONE_NAME > $PHONE_NAME_FILE_PATH

if [ $need_stash -eq 1 ];then
	#use stash to prevent uncommitted changes from affecting the operation
	export stash_message=`date`
	mrepo forall -c git stash save -u "$stash_message"
fi

if [ -n "`repo branch | grep " $PHONE_NAME "`" ];then
	mrepo abandon $PHONE_NAME
fi

mrepo init -m ../../customization/new/stable.xml
mrepo sync -d
mrepo forall -c git checkout -b $PHONE_NAME

#add stable common patches for phone
if [ -e $COMMON_FOLDER_PATH/$PHONE_STABLE_NAME/common_patch ];then
	cd $COMMON_FOLDER_PATH/$PHONE_STABLE_NAME/common_patch
	find -type d -name "commit" | sed 's/commit$//g' | while read -r dir
	do
		project_folder=$COMMON_FOLDER_PATH/$PHONE_STABLE_NAME/common_patch/$dir
		cd $REPO_ROOT/$dir
		if [ -d $project_folder/commit ];then
			git am --ignore-whitespace $project_folder/commit/*
		fi
	done
fi

if [ $auto_apply -eq 1 ];then
	#Note: May fail, user should fix confict manually
	export TMP_FILE_PATH
	repo forall -c 'echo $REPO_PATH > $TMP_FILE_PATH; stash=`git stash list | grep "$stash_message" | cut -d : -f1`; if [ -n "$stash" ];then git stash pop $stash >> $TMP_FILE_PATH 2>&1; fi; if [ $? -ne 0 ]; then echo "\033[31mapply failed:\033[0m"; cat $TMP_FILE_PATH; fi'
else
	if [ $need_stash -eq 1 ];then
		echo_color YELLOW "Auto_apply disabled"
		echo_color YELLOW "You can apply stashed changes by using \"git stash pop\" in project folder"
	fi
fi

echo_color GREEN "Start \"$PHONE_NAME\" success"
echo_color YELLOW "You can begin to develop.."
echo_color YELLOW "(use \"stash\" to save develop status, \"finish\" to complete develop)"
