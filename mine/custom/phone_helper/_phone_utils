#!/bin/bash -

#SHOW_TRACE="yes"
SHOW_TRACE="no"

#################
# normal
#################

function echo_color
{
	local color=$1
	local message=$2
	local pre_color=""
	local post_color='\033[0m'

	case "$color" in
	RED)
		pre_color='\033[31m';;
	GREEN)
		pre_color='\033[32m';;
	YELLOW)
		pre_color='\033[33m';;
	BLUE)
		pre_color='\033[34m';;
	NO)
		pre_color='\033[0m';;
	*)
		pre_color='\033[0m';;
	esac

	echo -e $pre_color$message$post_color
}

function choose_one
{
	local all_chooses=$1
	local target_var=$2
	local choose_list=""
	local input_chooses=""
	local input_choose_list=""
	local input=""
	local target=""
	local c=""
	local i=0
	local d=""
	local j=0

	for c in $all_chooses
	do
		((i++))
		choose_list[$i]=$c
		echo "$i $c"
	done

	while [ 1 ]
	do
		echo_color YELLOW "Please input number or input keywords: "
		read input
		if [[ $input =~ ^[0-9]+$ ]]; then
			if [ $input -gt $i ]; then
				echo_color RED "$input > $i"
				continue
			else
				target=${choose_list[$input]}
				break
			fi
		else
			if [ -z "$input" ]; then
				echo_color RED "no input"
				continue
			fi
			input_chooses=`echo -e "$all_chooses" | grep $input`
			if [ -z "$input_chooses" ]; then
				echo_color RED "No choose match"
				continue
			fi
			j=0
			for d in $input_chooses
			do
				((j++))
				input_choose_list[$j]=$d
				echo "$j $d"
			done
			echo_color YELLOW "Please input number: "
			read input
			if [[ $input =~ ^[0-9]+$ ]]; then
				if [ $input -gt $j ]; then
					echo_color RED "$input > $j"
					continue
				else
					target=${input_choose_list[$input]}
					break
				fi
			else
				echo_color RED "Should input number only"
				continue
			fi
			break
		fi
	done
	eval "$target_var=$target"
}

function check_and_remove
{
	if [ -e "$1" ];then
		rm -rf "$1"
	fi
}

function check_and_mkdir
{
	if [ ! -d "$1" ];then
		mkdir -p "$1"
	fi
}

function del_empty_folder
{
	find "$1" -mindepth 1 -maxdepth 1 -type d | while read -r dir
	do
		if [[ -z "$(find "$dir" -mindepth 1 -type f)" ]] >/dev/null
		then
			rm -rf "$dir"
		fi
		if [ -d "$dir" ]
		then
			del_empty_folder "$dir"
		fi
	done
}

#################
# repo
#################

function repo_check_env
{
	repo info . > /dev/null 2>&1
	if [ $? -ne 0 ];then
		echo_color RED "Check repo env failed, maybe manifest.xml not exis"
		return 1
	fi
	return 0
}

function mrepo
{
	if [ "$SHOW_TRACE" == "yes" ];then
		eval "repo $*"
	else
		eval "repo $* >/dev/null 2>&1"
	fi
}

function check_uncommit_changes
{
	if [ -n "`repo status | grep '^ ..\s'`" ];then
		repo status
		return 1
	fi
	return 0
}

function smart_repo_init
{
	local folder=$1
	local xml=""

	if [ -z $folder ];then
		xml=all_trunk.xml
	else
		xml=../../customization/${folder##*/}/stable.xml
	fi
	echo_color YELLOW "repo init $xml, and sync"
	mrepo init -m $xml
}

function check_xml_projects
{
	local target_xml_path=$1
	local origin_xml_path=$2
	local tmp_xml_path=/tmp/tmp.xml
	local tmp_result_path=/tmp/result.txt
	local project_list="`repo list`"
	local project_path=""
	local project_name=""

	#check if xml is phone's xml
	if [ "$origin_xml_path" == ".repo/manifests/all_trunk.xml" ];then
		return 0
	fi

	echo_color YELLOW "Begin to check xml projects.."
	cp $target_xml_path $tmp_xml_path
	sed -i '/<project path/!d' $tmp_xml_path
	> $tmp_result_path

	echo "$project_list" | while read line
	do
		project_path=`echo $line | cut -d ' ' -f 1`
		project_name=`echo $line | cut -d ' ' -f 3`
		cat $tmp_xml_path | grep -q "path=\"$project_path\" name=\"$project_name\""
		if [ $? -ne 0 ];then
			echo_color RED "\"$project_path\" not find in target xml"
			echo fail > $tmp_result_path
		fi
		reg=`echo "path=\"$project_path\" name=\"$project_name\"" | sed 's:\/:\\\\/:g'`
		sed -i "/$reg/d" $tmp_xml_path
	done
	cat $tmp_result_path | grep -q fail
	if [ $? -eq 0 ];then
		echo_color RED "Check xml projects failed"
		exit 1
	fi

	if [ -s $tmp_xml_path ];then
		cat $tmp_xml_path | while read line
		do
			project_path=`echo $line | grep -oP 'project path="\K[^"]+'`
			echo_color RED "\"$project_path\" not find in current xml"
		done
		echo_color RED "Check xml projects failed"
		exit 1
	fi
	echo_color GREEN "Check xml projects success"
}

#################
# special
#################

function show_info
{
	echo ""
	echo_color BLUE "PHONE_NAME: $1"
	echo_color BLUE "PHONE_STABLE_VERSION: $2"
	echo ""
}
